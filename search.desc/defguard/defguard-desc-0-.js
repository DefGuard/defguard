searchState.loadedDescShard("defguard", 0, "Specify a global value that can be accessed from anywhere …\nAutomates test objects creation to easily setup …\nCreate a new VPN location. Meant to be used to automate …\nRuns core web server exposing REST API.\nThis module implements a functionality of disconnecting …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate application state\nSends multiple events to be handled by gateway GRPC server.\nSends given <code>GatewayEvent</code> to be handled by gateway GRPC …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStandard claims: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nVerify JWT and, if successful, convert it to claims.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert claims to JWT.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nInitializes and migrates postgres database. Returns DB …\nCalls <code>U::from(self)</code>.\nOnly <code>id</code> and <code>name</code> from [<code>WebAuthn</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCopy fields to <code>User</code>. This function should be used by …\nCopy fields to <code>User</code>. This function is safe to call by a …\nFind by code.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the device should be considered as setup and ready …\nGets the first network of the network device FIXME: Return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrepare context for rendering welcome messages Available …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFetches a list of VPN locations where a given group is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDelete token from the database.\nFind by access token.\nFind by refresh token.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCheck if token has expired.\nGenerate new access token, scratching the old one. Changes …\nStore data in the database.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemoves the email domain, replaces all other forbidden …\nRemoves all forbidden characters\nReplaces all forbidden characters with <code>_</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes global <code>SETTINGS</code> struct at program startup\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if all required SMTP options are configured. User &amp; …\nHelper function which stores updated <code>Settings</code> in the DB …\nChecks if given settings are correct\nSelect all users without sensitive data.\nDeletes the user and cleans up his devices from gateways\nDisable user, log out all his sessions and update gateways …\nDisable email MFA; discard the secret.\nDisable MFA; discard recovery codes, TOTP secret, and …\nDisable TOTP; discard the secret.\nEnable email MFA\nEnable MFA. At least one of the authenticator factors must …\nEnable TOTP\nReturn all members of group\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates whether the user has been created via the LDAP …\nGenerate MFA code for email verification.\nGet recovery codes. If recovery codes exist, this function …\nCreate admin user if one doesn’t exist yet\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether a user has a random password set in …\nThe user’s LDAP RDN value. This is the first part of the …\nGenerate new email secret, similar to TOTP secret above, …\nGenerate new TOTP secret, save it, then return it as RFC …\nThe user’s sub claim returned by the OpenID provider. …\nStart user enrollment process This creates a new …\nStart user remote desktop configuration process This …\nUpdate gateway state based on this user device access …\nCheck if email MFA <code>code</code> is valid.\nVerify the state of mfa flags are correct. Recovers from …\nCheck if TOTP <code>code</code> is valid.\nFetch all for a given user.\nDelete all for a given user.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFetch all <code>Passkey</code>s for a given user.\nApp events which triggers webhook action\nUser data send on HWKeyProvision AppEvent\nFetch all enabled webhooks.\nDatabase column name.\nFind <code>WebHook</code> by URL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines datetime aggregation levels\nStores configuration required to setup a WireGuard network\nFetch a list of all allowed groups for a given network …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a list of allowed groups for a given network. Admin …\nGet a list of all allowed peers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet allowed groups, removing or adding groups as necessary.\nPrepares firewall configuration for a gateway based on …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDatabase representation of an ACL alias. Aliases can be …\nHelper struct combining all DB objects related to given …\nDatabase representation of an ACL rule. ACL rule has many …\nHelper struct combining all DB objects related to given …\nACL alias can be of one of the following types:\nACL alias can be in one of the following states:\nRepresentation of port range. Those are stored in the db …\n…\nACL rule can be in one of the following states:\nApplies pending state change if necessary.\nApplies pending state change if necessary.\nApplies pending changes for all specified aliases\nApplies pending changes for all specified rules\nConstructs a <code>String</code> of comma-separated addresses and …\nConstructs a <code>String</code> of comma-separated ports and port …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerses a destination string into singular ip addresses or …\nPerses a ports string into singular ports and port ranges …\nRetrieves all related objects from the db and converts …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIf license is valid returns current <code>EnterpriseSettings</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOkta Directory API responses\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nConverts ACLs into firewall rules which can be sent to a …\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nPrepares instance info for polling requests. Enterprise …\nCalls <code>U::from(self)</code>.\nUsed to check if user is allowed to manage his devices.\nGets full information about enterprise status.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an error if current session user is not allowed to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAPI representation of <code>AclAlias</code> All relations represented …\nAPI representation of <code>AclRule</code> used in API responses All …\nAPI representation of <code>AclAlias</code> used in API requests for …\nAPI representation of <code>AclRule</code> used in API requests for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrune the given username from illegal characters in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis exists as some LDAP servers don’t allow for …\nAdds user to LDAP.\nAdd user to a group.\nDeletes user from LDAP.\nRetrieves user with given username from LDAP.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nModifies LDAP group.\nModifies existing LDAP user.\nRemove user from a group.\nChanges user password.\nThis module contains the logic for synchronizing users and …\nThis module contains utility functions for LDAP …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate Windows NT-HASH; used for <code>sambaNTPassword</code>.\nCalculate salted SHA1 hash from given password in SSHA …\nCalculated AD password used for <code>unicodePwd</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the license object from a base64 encoded …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the license is past its expiry date (…\nChecks if the license has reached its maximum overdue time.\nCreate the license object based on the license key stored …\nTry to load the license from the database, if the license …\nChecks whether we should try to renew the license.\nChecks how much time has left until the <code>valid_until</code> time.\nGets the time the license is past its expiry date. If the …\nHelper function to update the in-memory cached license …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUpdate the counts of users, devices, and wireguard …\nAdd Job.\nConnectivity status.\nCreate a new job. Return job id.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn first availale Job.\nReturn the first available job.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new <code>Worker</code> instance.\nReturn initial state.\nUpdate connectivity timer.\nReturn <code>true</code> on success.\nRemove a job for a given worker.\nRemove Job with given id.\nBi-directional gRPC stream for comminication with Defguard …\nRuns gRPC server with core services.\nSet worker ip\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn type needed for knowing if a user came from OpenID …\nDedicated <code>GroupInfo</code> variant for group modification …\nContains the error value\nContains the success value\nTry to fetch [`Device’] if the device.id is of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTry to fetch <code>User</code> if the username is of the currently …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAuthentication Request See …\n…\nAuthorization Endpoint See …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogin Authorization Endpoint redirect with authorization …\nToken Endpoint …\n…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds MailHandler and runs it.\nWrapper for secrecy <code>SecretString</code> struct which implements …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDumps all data that could be used for debugging.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun periodic disconnect task")