name: Build Docker image

on:
  workflow_call:
    inputs:
      tags:
        description: "List of tags as key-value pair attributes"
        required: false
        type: string
      flavor:
        description: "List of flavors as key-value pair attributes"
        required: false
        type: string

env:
  GHCR_REPO: ghcr.io/defguard/defguard

jobs:
  build-docker:
    runs-on:
      - codebuild-defguard-core-runner-${{ github.run_id }}-${{ github.run_attempt }}
        image:${{ matrix.os }}
        instance-size:${{ matrix.size }}

    strategy:
      matrix:
        cpu: [arm64, amd64]
        include:
          - os: arm-3.0
            size: xlarge
            cpu: arm64
            tag: arm64
          - os: ubuntu-7.0
            size: xlarge
            cpu: amd64
            tag: amd64

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.cpu }}
          provenance: false
          push: true
          tags: "${{ env.GHCR_REPO }}:${{ github.sha }}-${{ matrix.tag }}"
          cache-from: |
            type=registry,ref=${{ env.GHCR_REPO }}:cache-${{ matrix.tag }}
            type=registry,ref=${{ env.GHCR_REPO }}:cache-${{ matrix.tag }}-${{ github.ref_name }}
          cache-to: type=registry,mode=max,ref=${{ env.GHCR_REPO }}:cache-${{ matrix.tag }}-${{ github.ref_name }}

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: "${{ env.GHCR_REPO }}:${{ github.sha }}-${{ matrix.tag }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH,MEDIUM"

  docker-manifest:
    runs-on: [self-hosted, Linux]

    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token

    needs: [build-docker]

    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REPO }}
          flavor: ${{ inputs.flavor }}
          tags: ${{ inputs.tags }}

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifests
        run: |
          tags='${{ env.GHCR_REPO }}:${{ github.sha }} ${{ steps.meta.outputs.tags }}'
          for tag in ${tags}
          do
            docker manifest rm ${tag} || true
            docker manifest create ${tag} ${{ env.GHCR_REPO }}:${{ github.sha }}-amd64 ${{ env.GHCR_REPO }}:${{ github.sha }}-arm64
            docker manifest push ${tag}
          done

      - name: Sign the images with GitHub OIDC Token
        run: |
          images='${{ env.GHCR_REPO }}:${{ github.sha }} ${{ steps.meta.outputs.tags }}'
          cosign sign --yes ${images}

      - name: Verify image signatures
        run: |
          images='${{ env.GHCR_REPO }}:${{ github.sha }} ${{ steps.meta.outputs.tags }}'
          cosign verify ${images} --certificate-oidc-issuer https://token.actions.githubusercontent.com --certificate-identity-regexp="https://github.com/DefGuard/defguard" -o text
