use std::net::IpAddr;

use crate::{
    db::{
        models::{
            authentication_key::{AuthenticationKey, AuthenticationKeyType},
            oauth2client::OAuth2Client,
        },
        Device, Group, Id, MFAMethod, User, WebAuthn, WebHook, WireguardNetwork,
    },
    enterprise::db::models::{
        api_tokens::ApiToken, audit_stream::AuditStream, openid_provider::OpenIdProvider,
    },
};
use chrono::{NaiveDateTime, Utc};

/// Shared context that needs to be added to every API event
///
/// Mainly meant to be stored in the audit log.
/// By design this is a duplicate of a similar struct in the `event_logger` module.
/// This is done in order to avoid circular imports once we split the project into multiple crates.
#[derive(Debug)]
pub struct ApiRequestContext {
    pub timestamp: NaiveDateTime,
    pub user_id: Id,
    pub username: String,
    pub ip: IpAddr,
    pub device: String,
}

impl ApiRequestContext {
    pub fn new(user_id: Id, username: String, ip: IpAddr, device: String) -> Self {
        let timestamp = Utc::now().naive_utc();
        Self {
            timestamp,
            user_id,
            username,
            ip,
            device,
        }
    }
}

/// Shared context for every event generated by a user in the gRPC server.
///
/// Similarly to `ApiRequestContexts` at the moment it's mostly meant to populate the audit log.
#[derive(Debug)]
pub struct GrpcRequestContext {
    pub timestamp: NaiveDateTime,
    pub user_id: Id,
    pub username: String,
    pub ip: IpAddr,
    pub device_id: Id,
    pub device_name: String,
}

impl GrpcRequestContext {
    pub fn new(
        user_id: Id,
        username: String,
        ip: IpAddr,
        device_id: Id,
        device_name: String,
    ) -> Self {
        let timestamp = Utc::now().naive_utc();
        Self {
            timestamp,
            user_id,
            username,
            ip,
            device_id,
            device_name,
        }
    }
}

pub enum ApiEventType {
    UserLogin,
    UserLogout,
    UserLoginFailed,
    UserMfaLogin {
        mfa_method: MFAMethod,
    },
    UserMfaLoginFailed {
        mfa_method: MFAMethod,
    },
    RecoveryCodeUsed,
    PasswordChangedByAdmin {
        user: User<Id>,
    },
    PasswordChanged,
    PasswordReset {
        user: User<Id>,
    },
    MfaDisabled,
    MfaTotpDisabled,
    MfaTotpEnabled,
    MfaEmailDisabled,
    MfaEmailEnabled,
    MfaSecurityKeyAdded {
        key: WebAuthn<Id>,
    },
    MfaSecurityKeyRemoved {
        key: WebAuthn<Id>,
    },
    UserAdded {
        user: User<Id>,
    },
    UserRemoved {
        user: User<Id>,
    },
    UserModified {
        before: User<Id>,
        after: User<Id>,
    },
    UserDeviceAdded {
        owner: User<Id>,
        device: Device<Id>,
    },
    UserDeviceRemoved {
        owner: User<Id>,
        device: Device<Id>,
    },
    UserDeviceModified {
        owner: User<Id>,
        before: Device<Id>,
        after: Device<Id>,
    },
    NetworkDeviceAdded {
        device: Device<Id>,
        location: WireguardNetwork<Id>,
    },
    NetworkDeviceRemoved {
        device: Device<Id>,
        location: WireguardNetwork<Id>,
    },
    NetworkDeviceModified {
        before: Device<Id>,
        after: Device<Id>,
        location: WireguardNetwork<Id>,
    },
    AuditStreamCreated {
        stream: AuditStream<Id>,
    },
    AuditStreamModified {
        before: AuditStream<Id>,
        after: AuditStream<Id>,
    },
    AuditStreamRemoved {
        stream: AuditStream<Id>,
    },
    VpnLocationAdded {
        location: WireguardNetwork<Id>,
    },
    VpnLocationRemoved {
        location: WireguardNetwork<Id>,
    },
    VpnLocationModified {
        before: WireguardNetwork<Id>,
        after: WireguardNetwork<Id>,
    },
    ApiTokenAdded {
        owner: User<Id>,
        token: ApiToken<Id>,
    },
    ApiTokenRemoved {
        owner: User<Id>,
        token: ApiToken<Id>,
    },
    ApiTokenRenamed {
        owner: User<Id>,
        token: ApiToken<Id>,
        old_name: String,
        new_name: String,
    },
    OpenIdAppAdded {
        app: OAuth2Client<Id>,
    },
    OpenIdAppRemoved {
        app: OAuth2Client<Id>,
    },
    OpenIdAppModified {
        before: OAuth2Client<Id>,
        after: OAuth2Client<Id>,
    },
    OpenIdAppStateChanged {
        app: OAuth2Client<Id>,
        enabled: bool,
    },
    OpenIdProviderModified {
        provider: OpenIdProvider<Id>,
    },
    OpenIdProviderRemoved {
        provider: OpenIdProvider<Id>,
    },
    SettingsUpdated,
    SettingsUpdatedPartial,
    SettingsDefaultBrandingRestored,
    GroupsBulkAssigned {
        users: Vec<User<Id>>,
        groups: Vec<Group<Id>>,
    },
    GroupAdded {
        group: Group<Id>,
    },
    GroupModified {
        before: Group<Id>,
        after: Group<Id>,
    },
    GroupRemoved {
        group: Group<Id>,
    },
    GroupMemberAdded {
        group: Group<Id>,
        user: User<Id>,
    },
    GroupMemberRemoved {
        group: Group<Id>,
        user: User<Id>,
    },
    WebHookAdded {
        webhook: WebHook<Id>,
    },
    WebHookModified {
        before: WebHook<Id>,
        after: WebHook<Id>,
    },
    WebHookRemoved {
        webhook: WebHook<Id>,
    },
    WebHookStateChanged {
        webhook: WebHook<Id>,
        enabled: bool,
    },
    AuthenticationKeyAdded {
        key: AuthenticationKey<Id>,
    },
    AuthenticationKeyRemoved {
        key: AuthenticationKey<Id>,
    },
    AuthenticationKeyRenamed {
        key: AuthenticationKey<Id>,
        old_name: Option<String>,
        new_name: Option<String>,
    },
    EnrollmentTokenAdded {
        user: User<Id>,
    },
    ClientConfigurationTokenAdded {
        user: User<Id>,
    },
}

/// Events from Web API
pub struct ApiEvent {
    pub context: ApiRequestContext,
    pub event: ApiEventType,
}

/// Events from gRPC server
#[derive(Debug)]
pub enum GrpcEvent {
    GatewayConnected,
    GatewayDisconnected,
    ClientConnected {
        context: GrpcRequestContext,
        location: WireguardNetwork<Id>,
        device: Device<Id>,
    },
    ClientDisconnected {
        context: GrpcRequestContext,
        location: WireguardNetwork<Id>,
        device: Device<Id>,
    },
}

/// Shared context for every event generated from a user request in the bi-directional gRPC stream.
///
/// Similarly to `ApiRequestContexts` at the moment it's mostly meant to populate the audit log.
#[derive(Debug)]
pub struct BidiRequestContext {
    pub timestamp: NaiveDateTime,
    pub user_id: Id,
    pub username: String,
    pub ip: IpAddr,
    pub user_agent: String,
}

impl BidiRequestContext {
    pub fn new(user_id: Id, username: String, ip: IpAddr, user_agent: String) -> Self {
        let timestamp = Utc::now().naive_utc();
        Self {
            timestamp,
            user_id,
            username,
            ip,
            user_agent,
        }
    }
}

/// Events emmited from gRPC bi-directional communication stream
#[derive(Debug)]
pub struct BidiStreamEvent {
    pub context: BidiRequestContext,
    pub event: BidiStreamEventType,
}

/// Wrapper enum for different types of events emitted by the bidi stream.
///
/// Each variant represents a separate gRPC service that's part of the bi-directional communications server.
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
pub enum BidiStreamEventType {
    Enrollment(EnrollmentEvent),
    PasswordReset(PasswordResetEvent),
    DesktopClientMfa(DesktopClientMfaEvent),
}

#[derive(Debug)]
pub enum EnrollmentEvent {
    EnrollmentStarted,
    EnrollmentDeviceAdded { device: Device<Id> },
    EnrollmentCompleted,
}

#[derive(Debug)]
pub enum PasswordResetEvent {
    PasswordResetRequested,
    PasswordResetStarted,
    PasswordResetCompleted,
}

#[derive(Debug)]
pub enum DesktopClientMfaEvent {
    Connected {
        device: Device<Id>,
        location: WireguardNetwork<Id>,
        method: MFAMethod,
    },
    Failed {
        device: Device<Id>,
        location: WireguardNetwork<Id>,
        method: MFAMethod,
    },
}

/// Shared context for every internally-triggered event.
///
/// Similarly to `ApiRequestContexts` at the moment it's mostly meant to populate the audit log.
#[derive(Debug)]
pub struct InternalEventContext {
    pub timestamp: NaiveDateTime,
    pub user_id: Id,
    pub username: String,
    pub ip: IpAddr,
    pub device: Device<Id>,
}

impl InternalEventContext {
    pub fn new(user_id: Id, username: String, ip: IpAddr, device: Device<Id>) -> Self {
        let timestamp = Utc::now().naive_utc();
        Self {
            timestamp,
            user_id,
            username,
            ip,
            device,
        }
    }
}

/// Events emmited by background threads, not triggered directly by users
#[derive(Debug)]
pub enum InternalEvent {
    DesktopClientMfaDisconnected {
        context: InternalEventContext,
        location: WireguardNetwork<Id>,
    },
}
